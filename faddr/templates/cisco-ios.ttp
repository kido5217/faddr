<vars>
IP_SPACE_MASK = "((\S+)\s(\S+))"
</vars>
<macro>
import ipaddress

def add_network_data(data):
    network = ipaddress.ip_network((data["ip"] + "/" + data["netmask"]), strict=False)
    data["network"] = network.with_prefixlen
    data["network_address"] = str(network.network_address)
    data["prefixlen"] = network.prefixlen
    data["address"] = data["ip"] + "/" + str(data["prefixlen"])
</macro>

<group name="interfaces.{{ name }}**">
interface {{ name }}
 duplex {{ duplex }}
 speed {{ speed }}
 description {{ description | _line_ }}
 shutdown {{ disabled | set(True) }}
 encapsulation {{ encapsulation | lower() }} {{ s_vlan }}
 encapsulation {{ encapsulation | lower() }} {{ s_vlan }} native
 encapsulation {{ encapsulation | lower() }} {{ s_vlan }} second-dot1q {{ c_vlan }}
 ip vrf forwarding {{ vrf }}
 ip access-group {{ acl_in }} in
 ip access-group {{ acl_out }} out
 <group name="ip*" method="table" itemize="ip">
 ip address {{ ip | re(IP_SPACE_MASK) | to_ip | ip_info }}
 ip address {{ ip | re(IP_SPACE_MASK) | to_ip | ip_info }} secondary
 </group>
</group>
